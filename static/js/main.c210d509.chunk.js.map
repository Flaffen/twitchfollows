{"version":3,"sources":["UserCard.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","props","state","imgUrl","banned","axios","get","params","login","user","to_name","then","response","console","log","undefined","data","setState","profile_image_url","catch","err","className","src","this","alt","target","href","format","followed_at","React","Component","App","username","follows","total","paginationCursor","userId","onChange","event","value","onSubmit","defaults","headers","common","id","pagination","cursor","addMore","from_id","after","length","alert","concat","type","placeholder","onClick","map","key","to_id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c210d509.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Moment from 'react-moment';\r\n\r\nclass UserCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      imgUrl: '',\r\n      banned: false\r\n    };\r\n\r\n    axios.get('https://api.twitch.tv/helix/users', {\r\n      params: {\r\n        login: this.props.user.to_name\r\n      }\r\n    })\r\n    .then(response => {\r\n      console.log(response);\r\n      if (response.data.data[0] === undefined) {\r\n        this.setState({\r\n          banned: true\r\n        });\r\n      } else {\r\n        this.setState({\r\n          imgUrl: response.data.data[0].profile_image_url\r\n        });\r\n      }\r\n    })\r\n    .catch(err => {\r\n      this.setState({\r\n        imgUrl: 'https://www.lciacademy.com/wp-content/uploads/2017/09/default-avatar-300x300.png'\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-4 top-buffer\">\r\n        <div className=\"card\">\r\n          <img className=\"card-img-top\" src={this.state.banned ? 'http://www.timeslanka.com/wp-content/uploads/2017/07/BANNED-300x300.jpg' : this.state.imgUrl} alt=\"Card\" />\r\n          <div className=\"card-body\">\r\n            <h5 className=\"card-title\"><a target=\"_blank\" href={'https://twitch.tv/' + this.props.user.to_name}>{this.props.user.to_name}</a></h5>\r\n            <p className=\"card-text\">Followed on <Moment format=\"L LT\">{this.props.user.followed_at}</Moment></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserCard;\r\n","import React from 'react';\nimport axios from 'axios';\nimport UserCard from './UserCard';\nimport './style.css';\n\nclass App extends React.Component {\n  state = {\n    username: '',\n    follows: [],\n    total: 0,\n    paginationCursor: '',\n    userId: ''\n  }\n\n  onChange = (event) => {\n    this.setState({\n      username: event.target.value\n    });\n  }\n\n  onSubmit = () => {\n    axios.defaults.headers.common['Client-Id'] = '5n406n3axbtfa6ls54l82hehn2niiz';\n    var userId;\n\n    axios.get('https://api.twitch.tv/helix/users', {\n      params: {\n        login: this.state.username\n      }\n    })\n    .then(response => {\n      console.log(response);\n      userId = response.data.data[0].id;\n\n      return axios.get('https://api.twitch.tv/helix/users/follows?from_id=' + userId);\n    })\n    .then(response => {\n      console.log(response);\n\n      this.setState({\n        follows: response.data.data,\n        total: response.data.total,\n        paginationCursor: response.data.pagination.cursor,\n        userId: userId\n      });\n    });\n  }\n\n  addMore = () => {\n    axios.get('https://api.twitch.tv/helix/users/follows', {\n      params: {\n        from_id: this.state.userId,\n        after: this.state.paginationCursor\n      }\n    })\n    .then(response => {\n      if (response.data.data.length === 0) {\n        alert('No more entries');\n      } else {\n        this.setState({\n          follows: this.state.follows.concat(response.data.data),\n          paginationCursor: response.data.pagination.cursor,\n        });\n      }\n    });\n  }\n\n  render() {\n    console.log(this.state);\n\n    return (\n      <div className=\"container\">\n        <div className=\"row top-buffer\">\n          <div className=\"col\">\n            <div className=\"input-group\">\n              <input value={this.state.username} onChange={this.onChange} type=\"text\" className=\"form-control\" placeholder=\"Twitch username\" />\n              <div className=\"input-group-append\">\n                <button onClick={this.onSubmit} className=\"btn btn-outline-secondary\" type=\"button\">Search</button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row top-buffer\">\n          <div className=\"col\">\n            <h3>TOTAL OF {this.state.total}</h3>\n          </div>\n        </div>\n        <div className=\"row top-buffer\">\n          {this.state.follows.map(user => (\n            <UserCard key={user.to_id} user={user} />\n          ))}\n        </div>\n        <div className=\"row top-buffer\">\n          <div className=\"col-4\">\n            <button onClick={this.addMore} type=\"button\" className=\"btn btn-primary\">More</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}